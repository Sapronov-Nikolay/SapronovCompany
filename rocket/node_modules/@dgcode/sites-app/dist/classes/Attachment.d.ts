import { Blob } from './Blob';
import { Page } from './Page';
import { BlobSource } from './BlobSource';
import { AttachmentType } from './AttachmentType';
/**
 * A Sites Attachment such as a file attached to a page.
 */
export declare class Attachment {
    /**
     * Deletes this attachment.
     */
    deleteAttachment(): void;
    /**
     * Return the data inside this object as a blob converted to the specified content type.
     *
     * @param {string} contentType The MIME type to convert to. For most blobs, `'application/pdf'`
     * is the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`,
     * `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also valid.
     * @returns {Blob} The data as a blob.
     * @see https://developers.google.com/apps-script/reference/base/blob.html
     */
    getAs(contentType: string): Blob;
    /**
     * Return the type of this attachment (HOSTED or WEB).
     *
     * @returns {AttachmentType} the attachment type
     * @see https://developers.google.com/apps-script/reference/sites/attachment-type.html
     */
    getAttachmentType(): (keyof typeof AttachmentType);
    /**
     * Return the data inside this object as a blob.
     *
     * @returns {Blob} The data as a blob.
     * @see https://developers.google.com/apps-script/reference/base/blob.html
     */
    getBlob(): Blob;
    /**
     * Return the mime type of this attachment.
     *
     * @returns {String} the attachment mime type
     */
    getContentType(): string;
    /**
     * Return the date this attachment was first published.
     *
     * @returns {Date} the date of original publication
     */
    getDatePublished(): Date;
    /**
     * Return the description of this attachment.
     *
     * @returns {String} the attachment description
     */
    getDescription(): string;
    /**
     * Return the date this attachment was last updated.
     *
     * @returns {Date} the last updated date
     */
    getLastUpdated(): Date;
    /**
     * Get the parent page of this attachment.
     *
     * @returns {Page} the parent page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getParent(): Page;
    /**
     * Return the title of this attachment.
     *
     * @returns {String} the attachment title
     */
    getTitle(): string;
    /**
     * Return the download url for this attachment.
     *
     * @returns {String} the download url
     */
    getUrl(): string;
    /**
     * Set the mime type of this attachment.
     *
     * @param {string} contentType the new mime type
     * @returns {Attachment} this Attachment for chaining
     */
    setContentType(contentType: string): this;
    /**
     * Set the descripton of this attachment.
     *
     * @param {string} description the new description
     * @returns {Attachment} this Attachment for chaining
     */
    setDescription(description: string): this;
    /**
     * Set the actual data of this attachment.
     *
     * @param {BlobSource} blob the new data
     * @returns {Attachment} this Attachment for chaining
     */
    setFrom(blob: BlobSource): this;
    /**
     * Set the parent page of this attachment.
     *
     * @param {Page} parent the new parent
     * @returns {Attachment} this Attachment for chaining
     */
    setParent(parent: Page): this;
    /**
     * Set the title of this attachment.
     *
     * @param {string} title the new title
     * @returns {Attachment} this Attachment for chaining
     */
    setTitle(title: string): this;
    /**
     * Sets the download url for this attachment.
     *
     * @param {string} url
     * @returns {Attachment} this Attachment for chaining
     */
    setUrl(url: string): this;
}
