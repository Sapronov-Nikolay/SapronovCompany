import { User } from './User';
import { Page } from './Page';
import { Comment } from './Comment';
import { PageType } from './PageType';
import { ListItem } from './ListItem';
import { Attachment } from './Attachment';
/**
 * An object representing a Google Site.
 */
export declare class Site {
    /**
     * Adds the given user to the list of editors for the `[Site](#)`.
     *
     * @param {string} emailAddress The email address of the user to add.
     * @returns {Site} This Site, for chaining.
     */
    addEditor(emailAddress: string): Site;
    /**
     * Adds the given user to the list of editors for the `[Site](#)`.
     *
     * @param {User} user A representation of the user to add.
     * @returns {Site} This Site, for chaining.
     */
    addEditor(user: User): Site;
    /**
     * Adds the given array of users to the list of editors for the `[Site](#)`.
     *
     * @param {string[]} emailAddresses An array of email addresses of the users to add.
     * @returns {Site} This Site, for chaining.
     */
    addEditors(emailAddresses: string[]): Site;
    /**
     * Add a new owner to the website
     *
     * @param {string} email The email of the user to add as an owner
     * @returns {Site} this site for chaining
     */
    addOwner(email: string): this;
    /**
     * Add a new owner to the website
     *
     * @param {User} user The user to add as an owner
     * @returns {Site} this site for chaining
     */
    addOwner(user: User): this;
    /**
     * Adds the given user to the list of viewers for the `[Site](#)`.
     *
     * @param {string} emailAddress The email address of the user to add.
     * @returns {Site} This Site, for chaining.
     */
    addViewer(emailAddress: string): Site;
    /**
     * Adds the given user to the list of viewers for the `[Site](#)`.
     *
     * @param {User} user A representation of the user to add.
     * @returns {Site} This Site, for chaining.
     */
    addViewer(user: User): Site;
    /**
     * Adds the given array of users to the list of viewers for the `[Site](#)`.
     *
     * @param {string[]} emailAddresses An array of email addresses of the users to add.
     * @returns {Site} This Site, for chaining.
     */
    addViewers(emailAddresses: string[]): Site;
    /**
     * Create a new announcements page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} the newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createAnnouncementsPage(title: string, name: string, html: string): Page;
    /**
     * Create a new file-cabinet page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createFileCabinetPage(title: string, name: string, html: string): Page;
    /**
     * Create a new list page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @param {string[]} columnNames the column names used for the list
     * @returns {Page} The newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createListPage(title: string, name: string, html: string, columnNames: string[]): Page;
    /**
     * Create a new page from a template.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {Page} template the template page
     * @returns {Page} the newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createPageFromTemplate(title: string, name: string, template: Page): Page;
    /**
     * Create a new web page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createWebPage(title: string, name: string, html: string): Page;
    /**
     * Gets an array of descendant pages (direct and indirect), up to a limit of 200 pages.
     *
     * @returns {Page[]} Page[] — an array of direct and indirect child pages
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getAllDescendants(): Page[];
    /**
     * Gets an array of descendant pages, with optional advanced arguments.
     *
     * @param {object} options JavaScript object fields defined in the Advanced Arguments section
     * below
     * @param {PageType[]} options.type only get pages of this type
     * @param {number} options.start start the results here
     * @param {number} options.max the max number of results (default 200)
     * @param {boolean} options.includeDrafts whether to include draft pages (default false)
     * @param {boolean} options.includeDeleted whether to include deleted pages (default false)
     * @param {string} options.search only return pages matching this query
     * @returns {Page[]} Page[] — an array of direct and indirect child pages of the given type
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getAllDescendants(options: SiteGetAllDescendantsOptions): Page[];
    /**
     * Gets a particular child page.
     *
     * @param {string} name the child page name
     * @returns {Page} the child page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getChildByName(name: string): Page;
    /**
     * Gets an array of child pages, up to a limit of 200 pages.
     *
     * @returns {Page[]} Page[] — an array of direct child pages
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getChildren(): Page[];
    /**
     * Gets an array of child pages, with optional advanced arguments.
     *
     * @param {object} options JavaScript object fields defined in the Advanced Arguments section
     * below
     * @param {PageType[]} options.type only get pages of this type
     * @param {number} options.start start the results here
     * @param {number} options.max the max number of results (default 200)
     * @param {boolean} options.includeDrafts whether to include draft pages (default false)
     * @param {boolean} options.includeDeleted whether to include deleted pages (default false)
     * @param {string} options.search only return pages matching this query
     * @returns {Page[]} Page[] — an array of direct child pages of the given type
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getChildren(options: SiteGetChildrenOptions): Page[];
    /**
     * Gets the list of editors for this `[Site](#)`.
     *
     * @returns {User[]} User[] — An array of users with edit permission.
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getEditors(): User[];
    /**
     * Return the name of the site
     *
     * @returns {String} the name of this Site instance
     */
    getName(): string;
    /**
     * Retrieves list of owners for the site
     *
     * @returns {User[]} User[] — an array containing User instances representing owners
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getOwners(): User[];
    /**
     * Return the summary of the web site
     *
     * @returns {String} the summary of this site
     */
    getSummary(): string;
    /**
     * Returns all template pages.
     *
     * @returns {Page[]} Page[] — an array containing Page instances representing templates
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getTemplates(): Page[];
    /**
     * Gets the theme of the site
     *
     * @returns {String} the theme of this site
     */
    getTheme(): string;
    /**
     * Return the title of the site
     *
     * @returns {String} the title of this site
     */
    getTitle(): string;
    /**
     * Retrieves the url of this Site.
     *
     * @returns {String} the url of this Site instance
     */
    getUrl(): string;
    /**
     * Gets the list of viewers and commenters for this `[Site](#)`.
     *
     * @returns {User[]} User[] — An array of users with view or comment permission.
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getViewers(): User[];
    /**
     * Removes the given user from the list of editors for the `[Site](#)`.
     *
     * @param {string} emailAddress The email address of the user to remove.
     * @returns {Site} This Site, for chaining.
     */
    removeEditor(emailAddress: string): Site;
    /**
     * Removes the given user from the list of editors for the `[Site](#)`.
     *
     * @param {User} user A representation of the user to remove.
     * @returns {Site} This Site, for chaining.
     */
    removeEditor(user: User): Site;
    /**
     * Removes owner from the site by user email
     *
     * @param {string} email The email of the user to remove from the owners
     * @returns {Site} the site instance for method chaining
     */
    removeOwner(email: string): Site;
    /**
     * Removes owner from the site
     *
     * @param {User} user A user to remove from the list of owners
     * @returns {Site} the site instance for method chaining
     */
    removeOwner(user: User): Site;
    /**
     * Removes the given user from the list of viewers and commenters for the `[Site](#)`.
     *
     * @param {string} emailAddress The email address of the user to remove.
     * @returns {Site} This Site for chaining.
     */
    removeViewer(emailAddress: string): Site;
    /**
     * Removes the given user from the list of viewers and commenters for the `[Site](#)`.
     *
     * @param {User} user A representation of the user to remove.
     * @returns {Site} This Site for chaining.
     */
    removeViewer(user: User): Site;
    /**
     * Gets an array of descendant pages that match a search query, up to a limit of 200 pages.
     *
     * @param {string} query the full text search query to match
     * @returns {Page[]} Page[] — an array of direct and indirect child pages of the given type
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    search(query: string): Page[];
    /**
     * Gets an array of descendant pages that match a search query, with optional advanced arguments.
     *
     * @param {string} query the full text search query to match
     * @param {object} options JavaScript object fields defined in the Advanced Arguments section
     * below
     * @param {PageType[]} options.type only get pages of this type
     * @param {number} options.start start the results here
     * @param {number} options.max the max number of results (default 200)
     * @param {boolean} options.includeDrafts whether to include draft pages (default false)
     * @param {boolean} options.includeDeleted whether to include deleted pages (default false)
     * @returns {Page[]} Page[] — an array of direct and indirect child pages of the given type
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    search(query: string, options: SiteSearchOptions): Page[];
    /**
     * Set the summary of the web site
     *
     * @param {string} summary A string summary describing the site
     * @returns {Site} the site for method chaining
     */
    setSummary(summary: string): Site;
    /**
     * Sets the theme of the site
     *
     * @param {string} theme a string name for the theme to set for this `[Site](#)`
     * @returns {Site} the site for method chaining
     */
    setTheme(theme: string): Site;
    /**
     * Set the title of the site
     *
     * @param {string} title the new title of the site
     * @returns {Site} the site for method chaining
     */
    setTitle(title: string): Site;
    /**
     * Add a new collaborator to the site
     *
     * @param {string} email The email of the user to add as a collaborator
     * @returns {Site} this site for chaining
     */
    addCollaborator(email: string): this;
    /**
     * Add a new collaborator to the website
     *
     * @param {User} user The user to add as a collaborator
     * @returns {Site} this site for chaining
     */
    addCollaborator(user: User): this;
    /**
     * Create a new Announcement
     *
     * @param {string} title The title of the Announcement page to create
     * @param {string} html The HTML body of the page
     * @param {Page} parent The Parent page
     * @returns {Page} The created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createAnnouncement(title: string, html: string, parent: Page): Page;
    /**
     * Deprecated.
     *
     * @param {string} inReplyTo a GData feed url - meaningless and broken
     * @param {string} html the comment content
     * @param {Page} parent the parent the comments shows up on
     * @returns {Comment} the newly created Comment
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    createComment(inReplyTo: string, html: string, parent: Page): Comment;
    /**
     * Deprecated.
     *
     * @param {string} html the item content - meaningless and broken.
     * @param {string[]} columnNames the names of the columns, which are unnecessary
     * @param {string[]} values the column values
     * @param {Page} parent the ListPage parent
     * @returns {ListItem} the ListItem for chaining.
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    createListItem(html: string, columnNames: string[], values: string[], parent: Page): ListItem;
    /**
     * Deprecated.
     *
     * @param {string} title the attachment title
     * @param {string} url the url of the attachment
     * @param {Page} parent the parent page
     * @returns {Attachment} this Attachment for chaining.
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    createWebAttachment(title: string, url: string, parent: Page): Attachment;
    /**
     * Deletes this site.
     */
    deleteSite(): void;
    /**
     * Retrieves a list of announcements for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of announcement @link Page} instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getAnnouncements(): Page[];
    /**
     * Retrieves a list of announcements pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getAnnouncementsPages(): Page[];
    /**
     * Retrieves a list of attachments for the given Google Site.
     *
     * @returns {Attachment[]} Attachment[] — an array of Attachment instances
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    getAttachments(): Attachment[];
    /**
     * Retrieves list of collaborators for the site
     *
     * @returns {User[]} User[] — an array containing User instances representing collaborators
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getCollaborators(): User[];
    /**
     * Retrieves a list of comments for the given Google Site.
     *
     * @returns {Comment[]} Comment[] — an array of Comment instances
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    getComments(): Comment[];
    /**
     * Retrieves a list of File Cabinet pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getFileCabinetPages(): Page[];
    /**
     * Retrieves a list of site List items for the given Google Site.
     *
     * @returns {ListItem[]} ListItem[] — an array of ListItem instances
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    getListItems(): ListItem[];
    /**
     * Retrieves a list of site List pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getListPages(): Page[];
    /**
     * Retrieves the feed url of this Site.
     *
     * @returns {String} the url of this Site's feed
     */
    getSelfLink(): string;
    /**
     * Return the siteName of the site
     *
     * @returns {String} the siteName of the site
     */
    getSiteName(): string;
    /**
     * Retrieves a list of web attachments for the given Google Site.
     *
     * @returns {Attachment[]} Attachment[] — an array of Attachment instances
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    getWebAttachments(): Attachment[];
    /**
     * Retrieves a list of web pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getWebPages(): Page[];
    /**
     * Removes a collaborator from the site by user email
     *
     * @param {string} email The email of the user to remove from the collaborators
     * @returns {Site} the site instance for method chaining
     */
    removeCollaborator(email: string): Site;
    /**
     * Removes a collaborator from the site
     *
     * @param {User} user A user to remove from the list of collaborators
     * @returns {Site} the site instance for method chaining
     */
    removeCollaborator(user: User): Site;
}
export declare class SiteGetAllDescendantsOptions {
    /**
     * only get pages of this type
     *
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    type?: (keyof typeof PageType)[];
    /**
     * start the results here
     */
    start?: number;
    /**
     * the max number of results (default 200)
     */
    max?: number;
    /**
     * whether to include draft pages (default false)
     */
    includeDrafts?: boolean;
    /**
     * whether to include deleted pages (default false)
     */
    includeDeleted?: boolean;
    /**
     * only return pages matching this query
     */
    search?: string;
}
export declare class SiteGetChildrenOptions {
    /**
     * only get pages of this type
     *
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    type?: (keyof typeof PageType)[];
    /**
     * start the results here
     */
    start?: number;
    /**
     * the max number of results (default 200)
     */
    max?: number;
    /**
     * whether to include draft pages (default false)
     */
    includeDrafts?: boolean;
    /**
     * whether to include deleted pages (default false)
     */
    includeDeleted?: boolean;
    /**
     * only return pages matching this query
     */
    search?: string;
}
export declare class SiteSearchOptions {
    /**
     * only get pages of this type
     *
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    type?: (keyof typeof PageType)[];
    /**
     * start the results here
     */
    start?: number;
    /**
     * the max number of results (default 200)
     */
    max?: number;
    /**
     * whether to include draft pages (default false)
     */
    includeDrafts?: boolean;
    /**
     * whether to include deleted pages (default false)
     */
    includeDeleted?: boolean;
}
