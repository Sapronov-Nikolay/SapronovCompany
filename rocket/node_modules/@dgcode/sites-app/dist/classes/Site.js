"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Exports -----------------------------------
/**
 * An object representing a Google Site.
 */
class Site {
    // addEditor(...) implementation
    addEditor(...args) {
        const res = null;
        return res;
    }
    /**
     * Adds the given array of users to the list of editors for the `[Site](#)`.
     *
     * @param {string[]} emailAddresses An array of email addresses of the users to add.
     * @returns {Site} This Site, for chaining.
     */
    addEditors(emailAddresses) {
        const site = null;
        return site;
    }
    // addOwner(...) implementation
    addOwner(...args) {
        const res = null;
        return res;
    }
    // addViewer(...) implementation
    addViewer(...args) {
        const res = null;
        return res;
    }
    /**
     * Adds the given array of users to the list of viewers for the `[Site](#)`.
     *
     * @param {string[]} emailAddresses An array of email addresses of the users to add.
     * @returns {Site} This Site, for chaining.
     */
    addViewers(emailAddresses) {
        const site = null;
        return site;
    }
    /**
     * Create a new announcements page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} the newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createAnnouncementsPage(title, name, html) {
        const page = null;
        return page;
    }
    /**
     * Create a new file-cabinet page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createFileCabinetPage(title, name, html) {
        const page = null;
        return page;
    }
    /**
     * Create a new list page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @param {string[]} columnNames the column names used for the list
     * @returns {Page} The newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createListPage(title, name, html, columnNames) {
        const page = null;
        return page;
    }
    /**
     * Create a new page from a template.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {Page} template the template page
     * @returns {Page} the newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createPageFromTemplate(title, name, template) {
        const page = null;
        return page;
    }
    /**
     * Create a new web page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createWebPage(title, name, html) {
        const page = null;
        return page;
    }
    // getAllDescendants(...) implementation
    getAllDescendants(...args) {
        const res = null;
        return res;
    }
    /**
     * Gets a particular child page.
     *
     * @param {string} name the child page name
     * @returns {Page} the child page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getChildByName(name) {
        const page = null;
        return page;
    }
    // getChildren(...) implementation
    getChildren(...args) {
        const res = null;
        return res;
    }
    /**
     * Gets the list of editors for this `[Site](#)`.
     *
     * @returns {User[]} User[] — An array of users with edit permission.
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getEditors() {
        const user = null;
        return user;
    }
    /**
     * Return the name of the site
     *
     * @returns {String} the name of this Site instance
     */
    getName() {
        const finalString = null;
        return finalString;
    }
    /**
     * Retrieves list of owners for the site
     *
     * @returns {User[]} User[] — an array containing User instances representing owners
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getOwners() {
        const user = null;
        return user;
    }
    /**
     * Return the summary of the web site
     *
     * @returns {String} the summary of this site
     */
    getSummary() {
        const finalString = null;
        return finalString;
    }
    /**
     * Returns all template pages.
     *
     * @returns {Page[]} Page[] — an array containing Page instances representing templates
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getTemplates() {
        const page = null;
        return page;
    }
    /**
     * Gets the theme of the site
     *
     * @returns {String} the theme of this site
     */
    getTheme() {
        const finalString = null;
        return finalString;
    }
    /**
     * Return the title of the site
     *
     * @returns {String} the title of this site
     */
    getTitle() {
        const finalString = null;
        return finalString;
    }
    /**
     * Retrieves the url of this Site.
     *
     * @returns {String} the url of this Site instance
     */
    getUrl() {
        const finalString = null;
        return finalString;
    }
    /**
     * Gets the list of viewers and commenters for this `[Site](#)`.
     *
     * @returns {User[]} User[] — An array of users with view or comment permission.
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getViewers() {
        const user = null;
        return user;
    }
    // removeEditor(...) implementation
    removeEditor(...args) {
        const res = null;
        return res;
    }
    // removeOwner(...) implementation
    removeOwner(...args) {
        const res = null;
        return res;
    }
    // removeViewer(...) implementation
    removeViewer(...args) {
        const res = null;
        return res;
    }
    // search(...) implementation
    search(...args) {
        const res = null;
        return res;
    }
    /**
     * Set the summary of the web site
     *
     * @param {string} summary A string summary describing the site
     * @returns {Site} the site for method chaining
     */
    setSummary(summary) {
        const site = null;
        return site;
    }
    /**
     * Sets the theme of the site
     *
     * @param {string} theme a string name for the theme to set for this `[Site](#)`
     * @returns {Site} the site for method chaining
     */
    setTheme(theme) {
        const site = null;
        return site;
    }
    /**
     * Set the title of the site
     *
     * @param {string} title the new title of the site
     * @returns {Site} the site for method chaining
     */
    setTitle(title) {
        const site = null;
        return site;
    }
    // addCollaborator(...) implementation
    addCollaborator(...args) {
        const res = null;
        return res;
    }
    /**
     * Create a new Announcement
     *
     * @param {string} title The title of the Announcement page to create
     * @param {string} html The HTML body of the page
     * @param {Page} parent The Parent page
     * @returns {Page} The created Page
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    createAnnouncement(title, html, parent) {
        const page = null;
        return page;
    }
    /**
     * Deprecated.
     *
     * @param {string} inReplyTo a GData feed url - meaningless and broken
     * @param {string} html the comment content
     * @param {Page} parent the parent the comments shows up on
     * @returns {Comment} the newly created Comment
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    createComment(inReplyTo, html, parent) {
        const comment = null;
        return comment;
    }
    /**
     * Deprecated.
     *
     * @param {string} html the item content - meaningless and broken.
     * @param {string[]} columnNames the names of the columns, which are unnecessary
     * @param {string[]} values the column values
     * @param {Page} parent the ListPage parent
     * @returns {ListItem} the ListItem for chaining.
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    createListItem(html, columnNames, values, parent) {
        const listItem = null;
        return listItem;
    }
    /**
     * Deprecated.
     *
     * @param {string} title the attachment title
     * @param {string} url the url of the attachment
     * @param {Page} parent the parent page
     * @returns {Attachment} this Attachment for chaining.
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    createWebAttachment(title, url, parent) {
        const attachment = null;
        return attachment;
    }
    /**
     * Deletes this site.
     */
    deleteSite() {
    }
    /**
     * Retrieves a list of announcements for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of announcement @link Page} instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getAnnouncements() {
        const page = null;
        return page;
    }
    /**
     * Retrieves a list of announcements pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getAnnouncementsPages() {
        const page = null;
        return page;
    }
    /**
     * Retrieves a list of attachments for the given Google Site.
     *
     * @returns {Attachment[]} Attachment[] — an array of Attachment instances
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    getAttachments() {
        const attachment = null;
        return attachment;
    }
    /**
     * Retrieves list of collaborators for the site
     *
     * @returns {User[]} User[] — an array containing User instances representing collaborators
     * @see https://developers.google.com/apps-script/reference/base/user.html
     */
    getCollaborators() {
        const user = null;
        return user;
    }
    /**
     * Retrieves a list of comments for the given Google Site.
     *
     * @returns {Comment[]} Comment[] — an array of Comment instances
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    getComments() {
        const comment = null;
        return comment;
    }
    /**
     * Retrieves a list of File Cabinet pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getFileCabinetPages() {
        const page = null;
        return page;
    }
    /**
     * Retrieves a list of site List items for the given Google Site.
     *
     * @returns {ListItem[]} ListItem[] — an array of ListItem instances
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    getListItems() {
        const listItem = null;
        return listItem;
    }
    /**
     * Retrieves a list of site List pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getListPages() {
        const page = null;
        return page;
    }
    /**
     * Retrieves the feed url of this Site.
     *
     * @returns {String} the url of this Site's feed
     */
    getSelfLink() {
        const finalString = null;
        return finalString;
    }
    /**
     * Return the siteName of the site
     *
     * @returns {String} the siteName of the site
     */
    getSiteName() {
        const finalString = null;
        return finalString;
    }
    /**
     * Retrieves a list of web attachments for the given Google Site.
     *
     * @returns {Attachment[]} Attachment[] — an array of Attachment instances
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    getWebAttachments() {
        const attachment = null;
        return attachment;
    }
    /**
     * Retrieves a list of web pages for the given Google Site.
     *
     * @returns {Page[]} Page[] — an array of Page instances
     * @see https://developers.google.com/apps-script/reference/sites/page.html
     */
    getWebPages() {
        const page = null;
        return page;
    }
    // removeCollaborator(...) implementation
    removeCollaborator(...args) {
        const res = null;
        return res;
    }
}
exports.Site = Site;
class SiteGetAllDescendantsOptions {
}
exports.SiteGetAllDescendantsOptions = SiteGetAllDescendantsOptions;
class SiteGetChildrenOptions {
}
exports.SiteGetChildrenOptions = SiteGetChildrenOptions;
class SiteSearchOptions {
}
exports.SiteSearchOptions = SiteSearchOptions;
//# sourceMappingURL=Site.js.map