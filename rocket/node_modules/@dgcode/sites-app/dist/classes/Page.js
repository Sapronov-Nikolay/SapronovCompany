"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Exports -----------------------------------
/**
 * A Page on a Google Site.
 */
class Page {
    /**
     * Add a new column to the list.
     *
     * @param {string} name the new column's name
     * @returns {Column} the newly created column
     * @see https://developers.google.com/apps-script/reference/sites/column.html
     */
    addColumn(name) {
        const column = null;
        return column;
    }
    // addHostedAttachment(...) implementation
    addHostedAttachment(...args) {
        const res = null;
        return res;
    }
    /**
     * Add a list item to the list.
     *
     * @param {string[]} values the values for each column
     * @returns {ListItem} the newly created ListItem
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    addListItem(values) {
        const listItem = null;
        return listItem;
    }
    /**
     * Add a web attachment to the page.
     *
     * @param {string} title the title of the attachment
     * @param {string} description a description of the attachment
     * @param {string} url the url of the file being attached
     * @returns {Attachment} the newly created attachment
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    addWebAttachment(title, description, url) {
        const attachment = null;
        return attachment;
    }
    // createAnnouncement(...) implementation
    createAnnouncement(...args) {
        const res = null;
        return res;
    }
    /**
     * Create a new announcements page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} the newly created Page
     */
    createAnnouncementsPage(title, name, html) {
        const page = null;
        return page;
    }
    /**
     * Create a new file-cabinet page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     */
    createFileCabinetPage(title, name, html) {
        const page = null;
        return page;
    }
    /**
     * Create a new list page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @param {string[]} columnNames the column names used for the list
     * @returns {Page} The newly created Page
     */
    createListPage(title, name, html, columnNames) {
        const page = null;
        return page;
    }
    /**
     * Create a new page from a template.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {Page} template the template page
     * @returns {Page} the newly created Page
     */
    createPageFromTemplate(title, name, template) {
        const page = null;
        return page;
    }
    /**
     * Create a new web page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     */
    createWebPage(title, name, html) {
        const page = null;
        return page;
    }
    /**
     * Deletes this page.
     */
    deletePage() {
    }
    // getAllDescendants(...) implementation
    getAllDescendants(...args) {
        const res = null;
        return res;
    }
    // getAnnouncements(...) implementation
    getAnnouncements(...args) {
        const res = null;
        return res;
    }
    // getAttachments(...) implementation
    getAttachments(...args) {
        const res = null;
        return res;
    }
    /**
     * Get the emails of the authors of the page
     *
     * @returns String[] — an array of author email addresses
     */
    getAuthors() {
        const string = null;
        return string;
    }
    /**
     * Gets a particular child page.
     *
     * @param {string} name the child page name
     * @returns {Page} the child page
     */
    getChildByName(name) {
        const page = null;
        return page;
    }
    // getChildren(...) implementation
    getChildren(...args) {
        const res = null;
        return res;
    }
    /**
     * Get the columns for the list.
     *
     * @returns {Column[]} Column[] — an array of Column instances
     * @see https://developers.google.com/apps-script/reference/sites/column.html
     */
    getColumns() {
        const column = null;
        return column;
    }
    /**
     * Return the date this page was first published.
     *
     * @returns {Date} the date of original publication
     */
    getDatePublished() {
        const date = null;
        return date;
    }
    /**
     * Get the HTML content of the page.
     *
     * @returns {String} the html content
     */
    getHtmlContent() {
        const finalString = null;
        return finalString;
    }
    /**
     * Returns whether the page is in draft mode.
     *
     * @returns {Boolean} whether the page is in draft mode
     */
    getIsDraft() {
        const finalBoolean = null;
        return finalBoolean;
    }
    /**
     * Return the last edit date, which includes only content edits.
     *
     * @returns {Date} the date the page was last updated, including only content edits
     */
    getLastEdited() {
        const date = null;
        return date;
    }
    /**
     * Return the last updated date, which includes non-content changes like moving.
     *
     * @returns {Date} the date the page was last updated with non-content changes
     */
    getLastUpdated() {
        const date = null;
        return date;
    }
    // getListItems(...) implementation
    getListItems(...args) {
        const res = null;
        return res;
    }
    /**
     * Return the page's name.
     *
     * @returns {String} the name of this page
     */
    getName() {
        const finalString = null;
        return finalString;
    }
    /**
     * Return the type of this page as a SitesApp.PageType enum.
     *
     * @returns {PageType} a PageType enum telling whether this is a Web, List, Announcement or File
     * Cabinet Page
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    getPageType() {
        const pageType = null;
        return pageType;
    }
    /**
     * Return the parent of this page.
     *
     * @returns {Page} the parent page of this page
     */
    getParent() {
        const page = null;
        return page;
    }
    /**
     * Returns the plain-text page content.
     *
     * @returns {String} the plain-text content of the page
     */
    getTextContent() {
        const finalString = null;
        return finalString;
    }
    /**
     * Return the page's title.
     *
     * @returns {String} the title of this page
     */
    getTitle() {
        const finalString = null;
        return finalString;
    }
    /**
     * Get the url of the page.
     *
     * @returns {String} the url of the page
     */
    getUrl() {
        const finalString = null;
        return finalString;
    }
    /**
     * Returns whether a page has been deleted.
     *
     * @returns {Boolean} whether the page has been deleted
     */
    isDeleted() {
        const finalBoolean = null;
        return finalBoolean;
    }
    /**
     * Returns whether this page is a copyable template.
     *
     * @returns {Boolean} whether this page is a template
     */
    isTemplate() {
        const finalBoolean = null;
        return finalBoolean;
    }
    /**
     * Publish this page as a copyable template.
     *
     * @param {string} name The name of the new template
     * @returns {Page} the newly published template
     */
    publishAsTemplate(name) {
        const page = null;
        return page;
    }
    // search(...) implementation
    search(...args) {
        const res = null;
        return res;
    }
    /**
     * Set the HTML content of the page.
     *
     * @param {string} html the new content
     * @returns {Page} this Page for chaining
     */
    setHtmlContent(html) {
        return this;
    }
    /**
     * Sets whether the page is in draft mode.
     *
     * @param {boolean} draft the new status
     * @returns {Page} this Page for chaining
     */
    setIsDraft(draft) {
        return this;
    }
    /**
     * Set this page's name.
     *
     * @param {string} name the new name
     * @returns {Page} this Page for chaining
     */
    setName(name) {
        return this;
    }
    /**
     * Set the parent of this page.
     *
     * @param {Page} parent the new parent
     * @returns {Page} this Page for chaining
     */
    setParent(parent) {
        return this;
    }
    /**
     * Set the page's title.
     *
     * @param {string} title the new title
     * @returns {Page} this Page for chaining
     */
    setTitle(title) {
        return this;
    }
    /**
     * Deprecated.
     *
     * @param {string} content the comment content
     * @returns {Comment} the newly created comment
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    addComment(content) {
        const comment = null;
        return comment;
    }
    // getComments(...) implementation
    getComments(...args) {
        const res = null;
        return res;
    }
    /**
     * Deprecated.
     *
     * @returns {String} the name of this page
     */
    getPageName() {
        const finalString = null;
        return finalString;
    }
    /**
     * Deprecated.
     *
     * @returns {String} the gData feed link
     */
    getSelfLink() {
        const finalString = null;
        return finalString;
    }
}
exports.Page = Page;
class PageGetAllDescendantsOptions {
}
exports.PageGetAllDescendantsOptions = PageGetAllDescendantsOptions;
class PageGetAnnouncementsOptOptions {
}
exports.PageGetAnnouncementsOptOptions = PageGetAnnouncementsOptOptions;
class PageGetAttachmentsOptOptions {
}
exports.PageGetAttachmentsOptOptions = PageGetAttachmentsOptOptions;
class PageGetChildrenOptions {
}
exports.PageGetChildrenOptions = PageGetChildrenOptions;
class PageGetListItemsOptOptions {
}
exports.PageGetListItemsOptOptions = PageGetListItemsOptOptions;
class PageSearchOptions {
}
exports.PageSearchOptions = PageSearchOptions;
class PageGetCommentsOptOptions {
}
exports.PageGetCommentsOptOptions = PageGetCommentsOptOptions;
//# sourceMappingURL=Page.js.map