import { Column } from './Column';
import { Comment } from './Comment';
import { ListItem } from './ListItem';
import { PageType } from './PageType';
import { BlobSource } from './BlobSource';
import { Attachment } from './Attachment';
/**
 * A Page on a Google Site.
 */
export declare class Page {
    /**
     * Add a new column to the list.
     *
     * @param {string} name the new column's name
     * @returns {Column} the newly created column
     * @see https://developers.google.com/apps-script/reference/sites/column.html
     */
    addColumn(name: string): Column;
    /**
     * Add an attachment to the page.
     *
     * @param {BlobSource} blob the data for the attachment
     * @returns {Attachment} the newly created attachment
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    addHostedAttachment(blob: BlobSource): Attachment;
    /**
     * Add an attachment to the page.
     *
     * @param {BlobSource} blob the data for the attachment
     * @param {string} description a description of the attachment
     * @returns {Attachment} the newly created attachment
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    addHostedAttachment(blob: BlobSource, description: string): Attachment;
    /**
     * Add a list item to the list.
     *
     * @param {string[]} values the values for each column
     * @returns {ListItem} the newly created ListItem
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    addListItem(values: string[]): ListItem;
    /**
     * Add a web attachment to the page.
     *
     * @param {string} title the title of the attachment
     * @param {string} description a description of the attachment
     * @param {string} url the url of the file being attached
     * @returns {Attachment} the newly created attachment
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    addWebAttachment(title: string, description: string, url: string): Attachment;
    /**
     * Create an announcements for this page.
     *
     * @param {string} title the page title
     * @param {string} html the page content
     * @returns {Page} the newly created Announcements
     */
    createAnnouncement(title: string, html: string): Page;
    /**
     * Create an announcements for this page.
     *
     * @param {string} title the page title
     * @param {string} html the page content
     * @param {boolean} asDraft whether to make the announcement a draft
     * @returns {Page} the newly created Announcements
     */
    createAnnouncement(title: string, html: string, asDraft: boolean): Page;
    /**
     * Create a new announcements page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} the newly created Page
     */
    createAnnouncementsPage(title: string, name: string, html: string): Page;
    /**
     * Create a new file-cabinet page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     */
    createFileCabinetPage(title: string, name: string, html: string): Page;
    /**
     * Create a new list page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @param {string[]} columnNames the column names used for the list
     * @returns {Page} The newly created Page
     */
    createListPage(title: string, name: string, html: string, columnNames: string[]): Page;
    /**
     * Create a new page from a template.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {Page} template the template page
     * @returns {Page} the newly created Page
     */
    createPageFromTemplate(title: string, name: string, template: Page): Page;
    /**
     * Create a new web page.
     *
     * @param {string} title the page title
     * @param {string} name the page name
     * @param {string} html the page content
     * @returns {Page} The newly created Page
     */
    createWebPage(title: string, name: string, html: string): Page;
    /**
     * Deletes this page.
     */
    deletePage(): void;
    /**
     * Gets an array of descendant pages (direct and indirect), up to a limit of 200 pages.
     *
     * @returns {Page[]} Page[] — an array of direct and indirect child pages
     */
    getAllDescendants(): Page[];
    /**
     * Gets an array of descendant pages, with optional advanced arguments.
     *
     * @param {object} options JavaScript object fields defined in the Advanced Arguments section
     * below
     * @param {PageType[]} options.type only get pages of this type
     * @param {number} options.start start the results here
     * @param {number} options.max the max number of results (default 200)
     * @param {boolean} options.includeDrafts whether to include draft pages (default false)
     * @param {boolean} options.includeDeleted whether to include deleted pages (default false)
     * @param {string} options.search only return pages matching this query
     * @returns {Page[]} Page[] — an array of direct and indirect child pages of the given type
     */
    getAllDescendants(options: PageGetAllDescendantsOptions): Page[];
    /**
     * Get the announcements for this page.
     *
     * @returns {Page[]} Page[] — an array of Announcements
     */
    getAnnouncements(): Page[];
    /**
     * Get the announcements for this page.
     *
     * @param {object} optOptions A JavaScript object containing advanced parameters
     * @returns {Page[]} Page[] — an array of Announcements
     */
    getAnnouncements(optOptions: PageGetAnnouncementsOptOptions): Page[];
    /**
     * Get the attachments for this page.
     *
     * @returns {Attachment[]} Attachment[] — an array of Attachments
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    getAttachments(): Attachment[];
    /**
     * Get the attachments for this page.
     *
     * @param {object} optOptions a JavaScript object containing optional parameters
     * @returns {Attachment[]} Attachment[] — an array of Attachments
     * @see https://developers.google.com/apps-script/reference/sites/attachment.html
     */
    getAttachments(optOptions: PageGetAttachmentsOptOptions): Attachment[];
    /**
     * Get the emails of the authors of the page
     *
     * @returns String[] — an array of author email addresses
     */
    getAuthors(): string[];
    /**
     * Gets a particular child page.
     *
     * @param {string} name the child page name
     * @returns {Page} the child page
     */
    getChildByName(name: string): Page;
    /**
     * Gets an array of child pages, up to a limit of 200 pages.
     *
     * @returns {Page[]} Page[] — an array of direct child pages
     */
    getChildren(): Page[];
    /**
     * Gets an array of child pages, with optional advanced arguments.
     *
     * @param {object} options JavaScript object fields defined in the Advanced Arguments section
     * below
     * @param {PageType[]} options.type only get pages of this type
     * @param {number} options.start start the results here
     * @param {number} options.max the max number of results (default 200)
     * @param {boolean} options.includeDrafts whether to include draft pages (default false)
     * @param {boolean} options.includeDeleted whether to include deleted pages (default false)
     * @param {string} options.search only return pages matching this query
     * @returns {Page[]} Page[] — an array of direct child pages of the given type
     */
    getChildren(options: PageGetChildrenOptions): Page[];
    /**
     * Get the columns for the list.
     *
     * @returns {Column[]} Column[] — an array of Column instances
     * @see https://developers.google.com/apps-script/reference/sites/column.html
     */
    getColumns(): Column[];
    /**
     * Return the date this page was first published.
     *
     * @returns {Date} the date of original publication
     */
    getDatePublished(): Date;
    /**
     * Get the HTML content of the page.
     *
     * @returns {String} the html content
     */
    getHtmlContent(): string;
    /**
     * Returns whether the page is in draft mode.
     *
     * @returns {Boolean} whether the page is in draft mode
     */
    getIsDraft(): boolean;
    /**
     * Return the last edit date, which includes only content edits.
     *
     * @returns {Date} the date the page was last updated, including only content edits
     */
    getLastEdited(): Date;
    /**
     * Return the last updated date, which includes non-content changes like moving.
     *
     * @returns {Date} the date the page was last updated with non-content changes
     */
    getLastUpdated(): Date;
    /**
     * Get the list items for the list.
     *
     * @returns {ListItem[]} ListItem[] — an array of ListItem instances
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    getListItems(): ListItem[];
    /**
     * Get the list items for the list.
     *
     * @param {object} optOptions A JavaScript object of optional parameters
     * @returns {ListItem[]} ListItem[] — an array of ListItem instances
     * @see https://developers.google.com/apps-script/reference/sites/list-item.html
     */
    getListItems(optOptions: PageGetListItemsOptOptions): ListItem[];
    /**
     * Return the page's name.
     *
     * @returns {String} the name of this page
     */
    getName(): string;
    /**
     * Return the type of this page as a SitesApp.PageType enum.
     *
     * @returns {PageType} a PageType enum telling whether this is a Web, List, Announcement or File
     * Cabinet Page
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    getPageType(): (keyof typeof PageType);
    /**
     * Return the parent of this page.
     *
     * @returns {Page} the parent page of this page
     */
    getParent(): Page;
    /**
     * Returns the plain-text page content.
     *
     * @returns {String} the plain-text content of the page
     */
    getTextContent(): string;
    /**
     * Return the page's title.
     *
     * @returns {String} the title of this page
     */
    getTitle(): string;
    /**
     * Get the url of the page.
     *
     * @returns {String} the url of the page
     */
    getUrl(): string;
    /**
     * Returns whether a page has been deleted.
     *
     * @returns {Boolean} whether the page has been deleted
     */
    isDeleted(): boolean;
    /**
     * Returns whether this page is a copyable template.
     *
     * @returns {Boolean} whether this page is a template
     */
    isTemplate(): boolean;
    /**
     * Publish this page as a copyable template.
     *
     * @param {string} name The name of the new template
     * @returns {Page} the newly published template
     */
    publishAsTemplate(name: string): Page;
    /**
     * Gets an array of descendant pages that match a search query, up to a limit of 200 pages.
     *
     * @param {string} query the full text search query to match
     * @returns {Page[]} Page[] — an array of direct and indirect child pages of the given type
     */
    search(query: string): Page[];
    /**
     * Gets an array of descendant pages that match a search query, with optional advanced arguments.
     *
     * @param {string} query the full text search query to match
     * @param {object} options JavaScript object fields defined in the Advanced Arguments section
     * below
     * @param {PageType[]} options.type only get pages of this type
     * @param {number} options.start start the results here
     * @param {number} options.max the max number of results (default 200)
     * @param {boolean} options.includeDrafts whether to include draft pages (default false)
     * @param {boolean} options.includeDeleted whether to include deleted pages (default false)
     * @returns {Page[]} Page[] — an array of direct and indirect child pages of the given type
     */
    search(query: string, options: PageSearchOptions): Page[];
    /**
     * Set the HTML content of the page.
     *
     * @param {string} html the new content
     * @returns {Page} this Page for chaining
     */
    setHtmlContent(html: string): this;
    /**
     * Sets whether the page is in draft mode.
     *
     * @param {boolean} draft the new status
     * @returns {Page} this Page for chaining
     */
    setIsDraft(draft: boolean): this;
    /**
     * Set this page's name.
     *
     * @param {string} name the new name
     * @returns {Page} this Page for chaining
     */
    setName(name: string): this;
    /**
     * Set the parent of this page.
     *
     * @param {Page} parent the new parent
     * @returns {Page} this Page for chaining
     */
    setParent(parent: Page): this;
    /**
     * Set the page's title.
     *
     * @param {string} title the new title
     * @returns {Page} this Page for chaining
     */
    setTitle(title: string): this;
    /**
     * Deprecated.
     *
     * @param {string} content the comment content
     * @returns {Comment} the newly created comment
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    addComment(content: string): Comment;
    /**
     * Deprecated.
     *
     * @returns {Comment[]} Comment[] — an array of Comments.
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    getComments(): Comment[];
    /**
     * Deprecated.
     *
     * @param {object} optOptions a JavaScript object containing optional parameters
     * @returns {Comment[]} Comment[] — an array of Comments.
     * @see https://developers.google.com/apps-script/reference/sites/comment.html
     */
    getComments(optOptions: PageGetCommentsOptOptions): Comment[];
    /**
     * Deprecated.
     *
     * @returns {String} the name of this page
     */
    getPageName(): string;
    /**
     * Deprecated.
     *
     * @returns {String} the gData feed link
     */
    getSelfLink(): string;
}
export declare class PageGetAllDescendantsOptions {
    /**
     * only get pages of this type
     *
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    type?: (keyof typeof PageType)[];
    /**
     * start the results here
     */
    start?: number;
    /**
     * the max number of results (default 200)
     */
    max?: number;
    /**
     * whether to include draft pages (default false)
     */
    includeDrafts?: boolean;
    /**
     * whether to include deleted pages (default false)
     */
    includeDeleted?: boolean;
    /**
     * only return pages matching this query
     */
    search?: string;
}
export declare class PageGetAnnouncementsOptOptions {
}
export declare class PageGetAttachmentsOptOptions {
}
export declare class PageGetChildrenOptions {
    /**
     * only get pages of this type
     *
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    type?: (keyof typeof PageType)[];
    /**
     * start the results here
     */
    start?: number;
    /**
     * the max number of results (default 200)
     */
    max?: number;
    /**
     * whether to include draft pages (default false)
     */
    includeDrafts?: boolean;
    /**
     * whether to include deleted pages (default false)
     */
    includeDeleted?: boolean;
    /**
     * only return pages matching this query
     */
    search?: string;
}
export declare class PageGetListItemsOptOptions {
}
export declare class PageSearchOptions {
    /**
     * only get pages of this type
     *
     * @see https://developers.google.com/apps-script/reference/sites/page-type.html
     */
    type?: (keyof typeof PageType)[];
    /**
     * start the results here
     */
    start?: number;
    /**
     * the max number of results (default 200)
     */
    max?: number;
    /**
     * whether to include draft pages (default false)
     */
    includeDrafts?: boolean;
    /**
     * whether to include deleted pages (default false)
     */
    includeDeleted?: boolean;
}
export declare class PageGetCommentsOptOptions {
}
